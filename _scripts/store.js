const store = new Vuex.Store({
  state: {
    setup: [],
    users: [],
    categories: [],
    questnsBop: [],
    questnsTof: [],
    questnsPic: [],
    answersBop: [],
    answersTof: [],
    answersPic: [],
    instructions: {},
    department: {},
    activeSetup: {},
    curUser: {},
    loading: true,
    login: false,
    showTime: false,
    timeup: false,
    error: '',
    bgClass: 'bg-2',
    container: 'mini-container',
  },
  mutations: {
    // synchronous
    setup: (state, payload) => (state.setup = [...payload]),
    users: (state, payload) => (state.users = [...payload]),
    categories: (state, payload) => (state.categories = [...payload]),
    questnsBop: (state, payload) => (state.questnsBop = [...payload]),
    questnsTof: (state, payload) => (state.questnsTof = [...payload]),
    questnsPic: (state, payload) => (state.questnsPic = [...payload]),
    answersBop: (state, payload) => (state.answersBop = [...payload]),
    answersTof: (state, payload) => (state.answersTof = [...payload]),
    answersPic: (state, payload) => (state.answersPic = [...payload]),
    instructions: (state, payload) => (state.instructions = {...payload }),
    department: (state, payload) => (state.department = {...payload }),
    activeSetup: (state, payload) => (state.activeSetup = {...payload }),
    curUser: (state, payload) => (state.curUser = {...payload }),
    bgClass: (state, payload) => (state.bgClass = payload),
    container: (state, payload) => (state.container = payload),
    loading: (state, payload) => (state.loading = payload),
    login: (state, payload) => (state.login = payload),
    showTime: (state, payload) => (state.showTime = payload),
    timeup: (state, payload) => (state.timeup = payload),
  },
  actions: {
    // asynchronous
    setLoading: ({ commit }, payload) => commit('loading', payload),
    setLogin: ({ commit }, payload) => commit('login', payload),
    setShowTime: ({ commit }, payload) => commit('showTime', payload),
    setTimeup: ({ commit }, payload) => commit('timeup', payload),
    setInstructions: ({ commit }, payload) => commit('instructions', payload),
    setDepartment: ({ commit }, payload) => commit('department', payload),
    setActiveSetup: ({ commit }, payload) => commit('activeSetup', payload),
    setCurUser: ({ commit }, payload) => commit('curUser', payload),
    setQuestnsBop: ({ commit }, payload) => commit('questnsBop', payload),
    setQuestnsTof: ({ commit }, payload) => commit('questnsTof', payload),
    setQuestnsPic: ({ commit }, payload) => commit('questnsPic', payload),
    setAnswersBop: ({ commit }, payload) => commit('answersBop', payload),
    setAnswersTof: ({ commit }, payload) => commit('answersTof', payload),
    setAnswersPic: ({ commit }, payload) => commit('answersPic', payload),
    setSetup: ({ commit }, payload) => commit('setup', payload),
    setUsers: ({ commit }, payload) => commit('users', payload),
    setCategories: ({ commit }, payload) => commit('categories', payload),
    setBgClass: ({ commit }, payload) => commit('bgClass', payload),
    setContainer: ({ commit }, payload) => commit('container', payload),
  },
  getters: {
    getState: state => field => state[field],
    fullName: state => (state.curUser.user_id ? state.curUser.first_name + ' ' + state.curUser.last_name : ''),
    userId: state => state.curUser.user_id || '',
    isAdmin: state => parseInt(state.curUser.is_admin, 10) === 1,
    userSeeAnalysis: state => parseInt(state.instructions.user_see_analysis, 10) === 1,
    userSeeResult: state => parseInt(state.instructions.user_see_result, 10) === 1,
    genInstruction: state => state.instructions.instruction || '',
    deptName: state => state.department.dept_name || '',
    deptFilename: state => state.department.dept_filename || '',
    deptId: state => state.department.dept_id || '',
    activeSetup: state => questn_type => state.setup.find(s => s.questn_type === questn_type),
  },
});